import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.*;

public class Main {
    public class attribute {
        int buy, sell, price;
    }
// comparator will sort according to Max price
    class sortByMaxGain implements Comparator<attribute>
    {

        public int compare(attribute a, attribute b)
        {
            return b.price - a.price;
        }
    }
    public void stock(int[] price,int n)
    {
        if (n == 1)
            System.out.println("No profit as at least two days are required to calculate gain");

        int count = 0;
         // sore the result
        ArrayList<attribute> list = new ArrayList<attribute>();

        int i = 0;
        while (i < n - 1) {
            while ((i < n - 1) && (price[i + 1] <= price[i]))
                i++;

            if (i == n - 1)
                break;

            attribute e = new attribute();
            e.buy = i++;

            while ((i < n) && (price[i] >= price[i - 1]))
                i++;


            e.sell = i - 1;
            e.price=price[e.sell]-price[e.buy];
            list.add(e);


            count++;
        }

        Collections.sort(list,new sortByMaxGain());
        if (count == 0)
            System.out.println("As prices are rising(Decending) there is no Profit gain");
        else
           for (int j = 0; j < count; j++) {
               System.out.println("Buy on day: " + (list.get(j).buy + 1)
                       + " "
                       + "Sell on day : " + (list.get(j).sell + 1) + "  Maximum Gain: " + list.get(j).price);
               break;
           }

        return;
    }


    public static void main(String[] args) {

        Main stock = new Main();


        int price[] = { 3,8,8,55,38,1,7,42,54,53 };
        int n = price.length;

        stock.stock(price, n);
    }
}
